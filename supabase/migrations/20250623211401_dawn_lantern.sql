/*
  # Create wedding party table (fixed)

  1. New Tables
    - `wedding_party`
      - `id` (integer, primary key)
      - `name` (text, required)
      - `role` (text, required)
      - `image_url` (text, required)
      - `bio` (text, optional with default empty string)
      - `created_at` (timestamp)

  2. Security
    - Enable RLS on `wedding_party` table
    - Add policies for public access (with conflict handling)
*/

-- Create table only if it doesn't exist
CREATE TABLE IF NOT EXISTS wedding_party (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  role text NOT NULL,
  image_url text NOT NULL,
  bio text DEFAULT '' NOT NULL,
  created_at timestamptz DEFAULT now()
);

-- Enable RLS only if not already enabled
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_class c
    JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE c.relname = 'wedding_party' 
    AND n.nspname = 'public'
    AND c.relrowsecurity = true
  ) THEN
    ALTER TABLE wedding_party ENABLE ROW LEVEL SECURITY;
  END IF;
END $$;

-- Create policies only if they don't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'wedding_party' 
    AND policyname = 'Wedding party is viewable by everyone'
  ) THEN
    CREATE POLICY "Wedding party is viewable by everyone"
      ON wedding_party
      FOR SELECT
      TO public
      USING (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'wedding_party' 
    AND policyname = 'Wedding party is editable by everyone'
  ) THEN
    CREATE POLICY "Wedding party is editable by everyone"
      ON wedding_party
      FOR ALL
      TO public
      USING (true);
  END IF;
END $$;